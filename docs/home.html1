<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Telesapp Chat</title>
<style>
  * { box-sizing: border-box; }
  body {
    margin: 0;
    font-family: Arial, sans-serif;
    background-color: #121212;
    color: #ccc;
    height: 100vh;
    display: flex;
    flex-direction: column;
  }
  header {
    background-color: #1f1f1f;
    padding: 10px 15px;
    display: flex;
    align-items: center;
    gap: 15px;
  }
  header .logo {
    color: #00bfff;
    font-weight: bold;
    font-size: 1.2rem;
  }
  header .icons {
    margin-left: auto;
    display: flex;
    gap: 12px;
  }
  header .icon {
    width: 24px; height: 24px;
    background-color: #333;
    border-radius: 4px;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    color: #888;
    cursor: pointer;
  }
  main {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 10px;
    overflow-y: auto;
  }
  .message {
    margin: 6px 0;
    padding: 10px 12px;
    border-radius: 10px;
    max-width: 70%;
    word-wrap: break-word;
  }
  .sent {
    background: #00bfff;
    color: white;
    margin-left: auto;
  }
  .received {
    background: #2a2a2a;
    margin-right: auto;
  }
  form {
    display: flex;
    padding: 10px;
    background: #1f1f1f;
  }
  form input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 6px;
    margin-right: 8px;
    background: #2a2a2a;
    color: #fff;
  }
  form button {
    padding: 10px 15px;
    border: none;
    background: #00bfff;
    color: white;
    border-radius: 6px;
    cursor: pointer;
  }
  .floating-btn {
    position: fixed;
    bottom: 25px; right: 25px;
    background-color: #e53935;
    color: white;
    border-radius: 50%;
    width: 56px; height: 56px;
    font-size: 36px; line-height: 56px;
    text-align: center;
    cursor: pointer;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    user-select: none;
  }
</style>
</head>
<body>
<header>
  <div class="logo">Telesapp</div>
  <div class="icons">
    <div class="icon" title="Add Contact">+</div>
    <div class="icon" title="Wi-Fi">&#128246;</div>
    <div class="icon" title="Brightness">&#9728;</div>
    <div class="icon" title="Privacy">&#128274;</div>
  </div>
</header>

<main id="chatBox">
  <p style="text-align:center;color:#888;">Start chatting by entering an email below ðŸ‘‡</p>
</main>

<form id="chatForm">
  <input type="text" id="receiver" placeholder="Receiver email" required />
  <input type="text" id="messageInput" placeholder="Type a message..." required />
  <button type="submit">Send</button>
</form>

<div class="floating-btn" title="New Chat">+</div>

<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script>
  // Replace with your Supabase credentials
  const SUPABASE_URL = "https://tbbjcxahtnojcuxwevkm.supabase.co";
  const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRiYmpjeGFodG5vamN1eHdldmttIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5ODA0MjMsImV4cCI6MjA3NDU1NjQyM30.mNp1Jj7PNiGXNC1WJDGaaUpJW2C0P7AqnLt3DlGhxqs";
  const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

  let sessionUser = null;

  async function getSession() {
    const { data: { session } } = await supabase.auth.getSession();
    sessionUser = session?.user;
    if (!sessionUser) {
      alert("Please log in first.");
      window.location.href = "login.html"; // redirect if not logged in
    }
  }

  async function fetchMessages() {
    if (!sessionUser) return;
    const { data, error } = await supabase
      .from("messages")
      .select("*")
      .or(`sender_email.eq.${sessionUser.email},receiver_email.eq.${sessionUser.email}`)
      .order("created_at", { ascending: true });

    if (error) {
      console.error("Error fetching messages:", error.message);
      return;
    }
    renderMessages(data);
  }

  function renderMessages(msgs) {
    const chatBox = document.getElementById("chatBox");
    chatBox.innerHTML = "";
    msgs.forEach(msg => {
      const div = document.createElement("div");
      div.classList.add("message");
      div.classList.add(msg.sender_email === sessionUser.email ? "sent" : "received");
      div.textContent = msg.body;
      chatBox.appendChild(div);
    });
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  async function sendMessage(e) {
    e.preventDefault();
    const receiver = document.getElementById("receiver").value.trim();
    const body = document.getElementById("messageInput").value.trim();
    if (!receiver || !body) return;

    const { error } = await supabase.from("messages").insert({
      sender_email: sessionUser.email,
      receiver_email: receiver,
      body
    });
    if (error) {
      console.error("Error sending:", error.message);
      return;
    }
    document.getElementById("messageInput").value = "";
  }

  document.getElementById("chatForm").addEventListener("submit", sendMessage);

  // Subscribe to realtime changes
  function subscribeRealtime() {
    supabase
      .channel("messages-channel")
      .on("postgres_changes", { event: "INSERT", schema: "public", table: "messages" }, payload => {
        if (
          payload.new.sender_email === sessionUser.email ||
          payload.new.receiver_email === sessionUser.email
        ) {
          fetchMessages();
        }
      })
      .subscribe();
  }

  (async () => {
    await getSession();
    await fetchMessages();
    subscribeRealtime();
  })();
</script>
</body>
</html>
